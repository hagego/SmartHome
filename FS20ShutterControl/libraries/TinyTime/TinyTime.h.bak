#ifndef __TINYTIME_H
#define __TINYTIME_H


/**
 * This class implements a time base with time based events.
 * It only cares about time of day, not about the date.
 * Events can be schedules as absolute time or relative to sunraise or sunset
 */

// some constants that cannot be put inside class declaration
const IPAddress    NTP_SERVER(129,69,1,153);             // rustime01.rus.uni-stuttgart.de
                                                         // NTP server used to get time (once per day)
const IPAddress    EARTHTOOLS_SERVER(208,113,226,171);   // www.earthtools.org
const char*        EARTHTOOLS_SERVER_NAME = "www.earthtools.org";
                                                         // used to query sunraise/sunset times (once per day)
const char*        LONGITUDE = "9.326123";               // longitude to query sunraise/sunset times
const char*        LATITUDE  = "48.635135";              // latitude to query sunraise/sunset times



class Time {
  static const unsigned int UTC_OFFSET       = 1;         // offset from UTC in hours w/o DST
  static const unsigned int NTP_PORT         = 123;       // port of the NTP protocol
  static const unsigned int NTP_PACKET_SIZE  = 48;        // size of an NTP packet
  static const unsigned int UDP_PORT         = 8888;      // local port to listen for UDP packets
  static const unsigned int EEPROM_BASE_ADDR = 0;         // EEPROM base adress to store event data


  public:

    // defines the mode for an event:
  // OFF:      The event is disabled
  // ABSOLUTE: The event is scheduled as absolute time of the day
  // SUNRAISE: The event is scheduled relative to sunraise
  // SUNSET:   The event is scheduled relative to sunset
    enum Mode {OFF,ABSOLUTE,SUNRISE,SUNSET};   

    /**
     * constructor
     */
    Time(unsigned int parEventCount) : eventCount(parEventCount),dstActive(true),syncSuccess(false),
                                       timeSunrise(0),timeSunset(0), syncDoneToday(false) {
    }

    /**
     * destructor
     */
    ~Time() {
      delete[] events;
    }

    /**
     * initializes the object. Must be called AFTER Ethernet is activated
     */
    void init() {
      //syncTimestamp[0] = '\0';

      // create an array with events according to the specified count and fill with disabled events
      events = new Event[eventCount];

      for(unsigned int event=0 ; event<eventCount ; event++) {
          events[event].time      = 0;
          events[event].mode      = OFF;
          events[event].offset    = 0;
          events[event].fired     = false;
          events[event].fireOnce  = true;
          events[event].pFunction = NULL;
      }

      udp.begin(UDP_PORT);
    };

    /**
     * reads stored event data from EEPROM (if available)
     */
    void readEeprom() {
      // check if EEPROM looks to be initialized
      byte readVal = EEPROM.read(EEPROM_BASE_ADDR);
      if(readVal != eventCount) {
        //Serial.println("initializing eeprom");
        // EEPROM not initialized for this application
        EEPROM.write(EEPROM_BASE_ADDR,(byte)eventCount);
        for(unsigned int event=0 ; event<eventCount ; event++) {
          eepromStoreEventData(event);
        }
      }
      else {
        //Serial.println("reading from eeprom");
        // EEPROM seems to contain meaningful values
        for(unsigned int event=0 ; event<eventCount ; event++) {
          eepromReadEventData(event);
        }
      }
    }

    void dump() {
      //Serial.println("event dump:");
      for(unsigned int event=0 ; event<eventCount ; event++) {
        //Serial.print("  event ID = ");Serial.println(event);
        //Serial.print("  time     = ");Serial.println(events[event].time);
        //Serial.print("  mode     = ");Serial.println(events[event].mode);
        //Serial.print("  fired    = ");Serial.println(events[event].fired);
        //Serial.print("  fireOnce = ");Serial.println(events[event].fireOnce);
      }
    }
    
    /**
     * synchronizes the time from an NTP server, queries todays sunraise and sunset times
     * and updates the absolute event time for all relative events.
     * It should be enough to do this max. once per day
     */
    boolean sync() {
      //
      // synchronize time from NTP server
      //
      Serial.println( F("NTP sync started") );

      // assume success. Will be set to false in case of any error
      syncSuccess = true;
xx
      // set all bytes in the buffer to 0
      memset(packetBuffer, 0, NTP_PACKET_SIZE);
      // Initialize values needed to form NTP request
      packetBuffer[0] = 0b11100011;   // LI=3 (unknown), Version=4, Mode=3 (client)
      packetBuffer[1] = 0;            // Stratum, or type of clock = 0 (unspecified)
      packetBuffer[2] = 6;            // Polling Interval (default)
      packetBuffer[3] = 0xEC;         // Peer Clock Precision
      // 8 bytes of zero for Root Delay & Root Dispersion
      packetBuffer[12]  = 49;         // 4 byte reference ID
      packetBuffer[13]  = 0x4E;
      packetBuffer[14]  = 49;
      packetBuffer[15]  = 52;

      // all required NTP fields have been given values, nowsend packet requesting a timestamp:         
      udp.beginPacket(NTP_SERVER, NTP_PORT); 
      udp.write(packetBuffer,NTP_PACKET_SIZE);
      udp.endPacket(); 
      Serial.println( F("NTP package sent") );
  
      delay(500);  // wait for answer

      unsigned int month,
                   dayOfMonth;
      if ( udp.parsePacket() ) {
        //Serial.println("NTP package received");
        // We've received a packet, read the data from it
        udp.read(packetBuffer,NTP_PACKET_SIZE);  // read the packet into the buffer

        // the timestamp starts at byte 40 of the received packet and is four bytes long
        unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
        unsigned long lowWord  = word(packetBuffer[42], packetBuffer[43]);  
        // combine the four bytes (two words) into a long integer
        // this is NTP time (seconds since Jan 1 1900):
        unsigned long secsSince1900 = highWord << 16 | lowWord;  
   
        // now convert NTP time into everyday time:
        // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:
        const unsigned long seventyYears = 2208988800UL;    
        // subtract seventy years:
        unsigned long epoch = secsSince1900 - seventyYears;  

        // correct timezone
        epoch += UTC_OFFSET*3600;
        
        // figure out if DST is active.
        // the following is based on time.c - low level time and date functions, (c) Michael Margolis 2009 
        #define LEAP_YEAR(Y)     ( ((1970+Y)>0) && !((1970+Y)%4) && ( ((1970+Y)%100) || !((1970+Y)%400) ) )
        static const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31};

        unsigned long daysSince1970 = epoch/86400;
        unsigned int wDay = ((daysSince1970 + 4) % 7) + 1;  // Sunday is day 1 

        
        unsigned int year = 0;  // years after 1970
        unsigned int days = 0;
        while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= daysSince1970) {
          year++;
        }
        
        days -= LEAP_YEAR(year) ? 366 : 365;
        unsigned int dayOfYear = daysSince1970 - days;
        
        month=0;
        for( month=0; month<12; month++) {
          unsigned int monthLength = monthDays[month];
          if (month==1 && (LEAP_YEAR(year))) { // february
            monthLength++;
          }
          if (dayOfYear >= monthLength) {
            dayOfYear -= monthLength;
          } else {
            break;
          }
        }
        
        month++;  // make Jan month 1
        dayOfMonth = dayOfYear+1;
        
        // now determine if DST is active.
        // DST starts last Sunday of March and ends last Sunday in October
        // (8-wDay)%7 results in days till next Sunday
        dstActive = ( (month>3 && month<10) || (month==3 && dayOfMonth+((8-wDay)%7)>31) || (month==10 && dayOfMonth+((8-wDay)%7)<31)) ? true : false;
        
        // correct for DST
        if(dstActive) {
          // add 1h
          epoch += 3600;
        }
                       
        // for now we only use seconds of the day
        lastSync.secondOfDay     = epoch%86400UL;
        lastSync.millisSinceBoot = millis();
        
        unsigned int h = lastSync.secondOfDay/3600UL,
                     m = (lastSync.secondOfDay%3600UL)/60UL,
                     s = lastSync.secondOfDay%60UL;

        Serial.println( F("NTP sync success") );
        sprintf(syncTimestamp,"%02d.%02d.%02d %02d:%02d:%02d DST=%d",dayOfMonth,month,(1970+year)%100,h,m,s,dstActive);
        Serial.println(syncTimestamp);

        syncDoneToday = true;
      }
      else {
        // error: no answer from UTP server
        syncSuccess = false;
        //Serial.println("NTP sync failed");
      }

      //
      // query todays sunraise and sunset time
      //

      // send http request to www.earthtools.com
      char request[100];

      //Serial.println("connecting to earthtools");
      if( tcpClient.connect(EARTHTOOLS_SERVER,80) ) {
        //Serial.println("http connected");
        sprintf(request,"GET /sun-1.0/%s/%s/%d/%d/1/0 HTTP/1.1",LATITUDE,LONGITUDE,dayOfMonth,month);
        tcpClient.println(request);
        sprintf(request,"Host: %s",EARTHTOOLS_SERVER_NAME);
        tcpClient.println(request);
        tcpClient.println("Connection: close");
        tcpClient.println();
        //Serial.println("earthtools request sent");

        // receive answer and parse XML
        const unsigned long timeout   = 2000;     // timeout 2 seconds
        unsigned long timeStart       = millis(); // start time
        unsigned long timeNow         = timeStart;
        bool completed                = false;
        const unsigned int BUFFERSIZE = 10;
        char buffer[BUFFERSIZE],
             content[BUFFERSIZE];
        unsigned int pos = 0;
        buffer[0]        = '\0';
        content[0]       = '\0';

        while( !completed && timeNow>=timeStart && timeNow-timeStart<timeout ) {
          if( tcpClient.available() ) {
            char c=tcpClient.read();

            if( c=='<' ) {
              // start of XML tag. copy buffer into content and reset
              //Serial.println("tag start");
              buffer[pos] = '\0';
              strcpy(content,buffer);
              //Serial.println(content);
              pos = 0;
            }
            else if( c=='>' ) {
              // end of XML tag
              //Serial.println("tag end");
            
              buffer[pos] = '\0';
              pos = 0;
            
              if(strcmp(buffer,"/sunrise")==0) {
                timeSunrise = 3600UL*atol(content)+60UL*atol(content+3)+atol(content+6);
                // correct for DST
                if(dstActive) {
                  // add 1h
                  timeSunrise += 3600;
                }
                //Serial.println("sunrise=");Serial.println(content);
              }
              if(strcmp(buffer,"/sunset")==0) {
                timeSunset = 3600UL*atol(content)+60UL*atol(content+3)+atol(content+6);
                // correct for DST
                if(dstActive) {
                  // add 1h
                  timeSunset += 3600;
                }
                //Serial.println("sunset=");Serial.println(content);
              }
              if(strcmp(buffer,"/sun")==0) {
                completed = true;
              }
            }
            else {
              // inside tag
              if(pos<BUFFERSIZE-2) {
                buffer[pos++] = c;
              }
            }
          }

          timeNow = millis();
        }

        tcpClient.stop();

        if(timeSunrise==0 || timeSunset==0) {
          // sunrise/sunset time(s) could not be queried
          syncSuccess = false;
        }
        else {
          // set absolute event time of all sunrise/sunset relative events
          for(unsigned int event=0 ; event<eventCount ; event++) {
            if(events[event].mode == SUNRISE) {
              events[event].time = timeSunrise + events[event].offset;
            }
            if(events[event].mode == SUNSET) {
              events[event].time = timeSunset + events[event].offset;
            }
          }
        }
      }
      else {
        // query failed
        //Serial.println("earthtools connect failed");
        syncSuccess = false;
      }

      //Serial.println("sync end");
      return syncSuccess;
    };

    
    /**
     * Updates the actual time
     */
    void update(boolean syncNtp=false) {
      unsigned long current = millis(),
                    delta;

      if(current<lastSync.millisSinceBoot) {
        // wrap around
        delta = (0xFFFFFFFFUL-lastSync.millisSinceBoot+current)/1000UL;
      }
      else {
        delta = (current-lastSync.millisSinceBoot)/1000UL;
      }
      
      actualTime.secondOfDay     = lastSync.secondOfDay+delta;
      boolean newDay             = (actualTime.secondOfDay>86400UL);
      actualTime.secondOfDay    %= 86400UL;
      actualTime.millisSinceBoot = current;
      
      // a snc() might reset the time to the very end of the previous day so newDay
      // might actually happen twice 
      if(syncNtp || (!syncDoneToday && actualTime.secondOfDay>3600 && actualTime.secondOfDay<4000)) {
        // sync with NTP server and update events with relative time
        sync();
        syncError = abs(actualTime.secondOfDay-lastSync.secondOfDay);
        
        actualTime = lastSync;
      }
      
      // enable events for this day again
      if(newDay) {
        syncDoneToday = false;
        for(unsigned int event=0 ; event<eventCount ; event++) {
          events[event].fired = false;
        }
      }
    }
    
    /**
     * Check if an event needs to be fired
     */
    void checkEvents() {
      for(unsigned int event=0 ; event<eventCount ; event++) {
        if(events[event].mode != OFF) {
          if(!events[event].fired && actualTime.secondOfDay>=events[event].time) {
            // fire event
            //Serial.print("fire event, ID=");Serial.println(event);
            events[event].fired = true;
            events[event].pFunction();            

            // disable event if it should be active only for one day
            if(events[event].fireOnce) {
              events[event].mode = OFF;
            }
          }
        }
      }
    }
    
    /**
     * returns the time stamp of the last sync
     */
    char* getSyncTimestamp() {
      //return syncTimestamp;
      return "";
    }
    
    /**
     * returns the time as seconds of the day
     */
    unsigned long getSecondsOfDay() {
      update();
            
      return actualTime.secondOfDay;
    };

    /**
     * returns the sunrise time as seconds of day
     */
    unsigned long getSunriseTime() {
      return timeSunrise;
    }
    
    /**
     * returns the sunset time as seconds of day
     */
    unsigned long getSunsetTime() {
      return timeSunset;
    }

    /**
     * returns the error offset that was determined at the last sync
     */
    unsigned long getSyncError() {
      return syncError;
    }

    /**
     * adds an event
     * returns the id for this event for further calls dealing with it
     */
    unsigned int addEvent(void (*pFunction)()) {
      static unsigned int index = 0;   // keep track of index for next event

      if(index<eventCount) {
        // event can be added
        events[index].pFunction = pFunction;
      }

      index++;
      return index-1;
    }


    /**
     * enables/disables an event
     */
    void setEventMode(unsigned int eventId,Mode mode) {
      if(eventId<eventCount) {
        events[eventId].mode = mode;

        // update EEPROM
        eepromStoreEventData(eventId);

        // check if event still need to be fired today
        if( actualTime.secondOfDay>=events[eventId].time ) {
          events[eventId].fired = true;
        }
        else {
          events[eventId].fired = false;
        }
      }
    }

    /**
     * returns the enabled state of an event
     */
    Mode getEventMode(unsigned int eventId) {
      if(eventId<eventCount) {
        return events[eventId].mode;
      }
      return OFF;
    }

    /**
     * sets the fireOnce status
     */
  void setEventFireOnce(unsigned int eventId,bool fireOnce) {
      if(eventId<eventCount) {
        events[eventId].fireOnce = fireOnce;
    }
    }

    /**
     * returns the fireOnce status
     */
  bool getEventFireOnce(unsigned int eventId) {
      if(eventId<eventCount) {
        return events[eventId].fireOnce;
    }
    }

    /**
     * sets the event time
     */
    void setEventTime(unsigned int eventId,unsigned long eventTime) {
      if(eventId<eventCount) {
        events[eventId].time = eventTime;

        // update EEPROM
        eepromStoreEventData(eventId);

        // check if event still needs to happen today
        if( actualTime.secondOfDay>=events[eventId].time ) {
          events[eventId].fired = true;
        }
        else {
          events[eventId].fired = false;
        }
      }
    }

    /**
     * returns the event time
     */
    unsigned long getEventTime(unsigned int eventId) {
      if(eventId<eventCount) {
        return events[eventId].time;
      }
      return 0;
    }

    /**
     * sets the offset for relative events
     */
    void setEventOffset(unsigned int eventId,long eventOffset) {
      if(eventId<eventCount) {
        events[eventId].offset = eventOffset;

        if(events[eventId].mode==SUNRISE) {
          events[eventId].time = timeSunrise+eventOffset;
        }
        if(events[eventId].mode==SUNSET) {
          events[eventId].time = timeSunset+eventOffset;
        }

        // update EEPROM
        eepromStoreEventData(eventId);

        // check if event still needs to happen today
        if( actualTime.secondOfDay>=events[eventId].time ) {
          events[eventId].fired = true;
        }
        else {
          events[eventId].fired = false;
        }
      }
    }
     

    /**
     * returns the event offset for relative events
     */
    unsigned long getEventOffset(unsigned int eventId) {
      if(eventId<eventCount) {
        return events[eventId].offset;
      }
      return 0;
    }

  private:

    // EEPROM format:
    // EEPROM_BASE_ADDR         event count
    // EEPROM_BASE_ADDR+1       event ID 0 mode   (1 byte)
    // EEPROM_BASE_ADDR+2       event ID 0 time   (4 bytes)
    // EEPROM_BASE_ADDR+6       event ID 0 offset (4 bytes)
    // EEPROM_BASE_ADDR+10      event ID 1 mode   (1 byte)
    // ...
    // 9 bytes per event

    /**
     * stores event data (mode,time,offset) in the EEPROM
     */
    void eepromStoreEventData(unsigned int eventId) {
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9,events[eventId].mode);
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9+1,(events[eventId].time/65536)/256);
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9+2,(events[eventId].time/65536)%256);
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9+3,(events[eventId].time%65536)/256);
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9+4,(events[eventId].time%65536)%256);
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9+5,(events[eventId].offset/65536)/256);
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9+6,(events[eventId].offset/65536)%256);
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9+7,(events[eventId].offset%65536)/256);
      EEPROM.write(EEPROM_BASE_ADDR+1+eventId*9+8,(events[eventId].offset%65536)%256);
    }

    /**
     * reads event data (mode,time,offset) from EEPROM
     */
    void eepromReadEventData(unsigned int eventId) {
      events[eventId].mode = (Mode)EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9);
      byte b1 = EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9+1);
      byte b2 = EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9+2);
      byte b3 = EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9+3);
      byte b4 = EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9+4);
      events[eventId].time = (b1*256+b2)*65536+(b3*256+b4);

      b1 = EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9+5);
      b2 = EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9+6);
      b3 = EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9+7);
      b4 = EEPROM.read(EEPROM_BASE_ADDR+1+eventId*9+8);
      events[eventId].offset = (b1*256+b2)*65536+(b3*256+b4);

      // don't fire event if its time is already gone past today
      if(events[eventId].time > actualTime.secondOfDay) {
        events[eventId].fired = true;
      }
      else {
        events[eventId].fired = false;
      }
    }

    // maps milliseconds since boot to a time (seconds of day)
    struct Timestamp {
      unsigned long secondOfDay;
      unsigned long millisSinceBoot;
    };

    // struct to control events
    struct Event {
      unsigned long time;            // absolute time for the event as seconds of day
      Mode          mode;            // event enabled, absolute, or relative to sunraise/sunset ?
      long          offset;           // offset to the reference time for relative events
      boolean       fired;           // true if the event was already fired this day
      boolean       fireOnce;        // if true, the event will be automatically disbaled after it fired
      void         (*pFunction)();   // pointer to the function that will be called when the event fires
    };

    // array storing all events
    Event *events;
    
    byte packetBuffer[NTP_PACKET_SIZE]; // UDP buffer for NTP protocol
    EthernetUDP udp;                    // UDP object
    EthernetClient tcpClient;           // TCP client

    Timestamp lastSync;                 // the timestamp of the last synchronization
    Timestamp actualTime;               // actual time. Only valid after update() or syncIfNeeded()
    unsigned long syncError;            // offset to real time in seconds before last sync
    boolean   syncSuccess;              // last sync successfull ?
    boolean   dstActive;                // daylight saving time active ?
    boolean   syncDoneToday;            // NTP sync done today already ?
    //char    syncTimestamp[30];        // time & date of last sync as string
    unsigned int eventCount;            // numer of time events to handle
    unsigned long timeSunrise;          // time of sunrise as seconds of day
    unsigned long timeSunset;           // time of sunset as seconds of day
};


#endif